/* automatically generated by rust-bindgen */

extern crate libc;

use libc::*;
use std::*;


pub enum Struct_bladerf { }

#[repr(C)]
#[derive(Copy, Clone, Debug)]
pub enum bladerf_backend {
    ANY = 0,    
    LINUX = 1,  
    LIBUSB = 2, 
    CYPRESS = 3, 
    DUMMY = 100,
}

#[repr(C)]
#[derive(Copy, Clone, Debug)]
pub enum bladerf_dev_speed {
    UNKNOWN = 0,
    HIGH = 1,
    SUPER = 2,
}

#[repr(C)]
#[derive(Copy)]
pub struct Struct_bladerf_devinfo {
    pub backend: bladerf_backend,
    pub serial: [::libc::c_char; 33usize],
    pub usb_bus: uint8_t,
    pub usb_addr: uint8_t,
    pub instance: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_bladerf_devinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bladerf_devinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

impl Struct_bladerf_devinfo {
  pub fn serial(&self) -> String {
      let serial_u8: Vec<u8>= self.serial.iter().map(|&x| x as u8).collect();

      // Build String
      let serial_cstr = unsafe { ffi::CString::from_vec_unchecked(serial_u8) };
      let serial_str = serial_cstr.into_string().unwrap();

      return serial_str;
  }
}

#[repr(C)]
#[derive(Debug, PartialEq)]
pub enum bladerf_tuning_mode {
    INVALID = -1,
    HOST = 0,
    FPGA = 1,
}

#[repr(C)]
#[derive(Debug, PartialEq)]
pub enum bladerf_loopback {
    NONE = 0,
    FIRMWARE = 1,
    BB_TXLPF_RXVGA2 = 2,
    BB_TXVGA1_RXVGA2 = 3,
    BB_TXLPF_RXLPF = 4,
    BB_TXVGA1_RXLPF = 5,
    RF_LNA1 = 6,
    RF_LNA2 = 7,
    RF_LNA3 = 8,
    RFIC_BIST = 9,
}

#[repr(C)]
#[derive(Copy)]
pub struct Struct_bladerf_rational_rate {
    pub integer: uint64_t,
    pub num: uint64_t,
    pub den: uint64_t,
}
impl ::std::clone::Clone for Struct_bladerf_rational_rate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bladerf_rational_rate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy, PartialEq, Debug)]
pub enum bladerf_sampling {
    UNKNOWN = 0,
    INTERNAL = 1,
    EXTERNAL = 2,
}
impl ::std::clone::Clone for bladerf_sampling {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for bladerf_sampling {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
pub enum bladerf_lna_gain {
    UNKNOWN = 0,
    BYPASS = 1,
    MID = 2,
    MAX = 3,
}

#[repr(C)]
#[derive(Copy)]
pub enum bladerf_lpf_mode {
    NORMAL = 0,
    BYPASSED = 1,
    DISABLED = 2,
}
impl ::std::clone::Clone for bladerf_lpf_mode {
    fn clone(&self) -> Self { *self }
}

#[repr(C)]
#[derive(Copy)]
pub enum bladerf_module {
    RX0 = 0,
    TX0 = 1,
    RX1 = 2,
    TX1 = 3,
}
impl ::std::clone::Clone for bladerf_module {
    fn clone(&self) -> Self { *self }
}

#[repr(C)]
pub enum bladerf_xb {
    NONE = 0,
    XB_100 = 1,
    XB_200 = 2,
}

#[repr(C)]
pub enum bladerf_xb200_filter {
    FILTER_50M = 0,
    FILTER_144M = 1,
    FILTER_222M = 2,
    CUSTOM = 3,
    AUTO_1DB = 4,
    AUTO_3DB = 5,
}

#[repr(C)]
pub enum bladerf_xb200_path {
    BYPASS = 0,
    MIX = 1,
}

#[repr(C)]
#[derive(Copy)]
pub struct Struct_bladerf_quick_tune {
    pub freqsel: uint8_t,
    pub vcocap: uint8_t,
    pub nint: uint16_t,
    pub nfrac: uint32_t,
    pub flags: uint8_t,
}
impl ::std::clone::Clone for Struct_bladerf_quick_tune {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bladerf_quick_tune {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
pub enum bladerf_cal_module {
    LPF_TUNING = 0,
    TX_LPF = 1,
    RX_LPF = 2,
    RXVGA2 = 3,
}

#[repr(C)]
pub enum bladerf_correction {
    LMS_DCOFF_I = 0,
    LMS_DCOFF_Q = 1,
    FPGA_PHASE = 2,
    FPGA_GAIN = 3,
}

#[repr(C)]
pub enum bladerf_format {
    SC16_Q11 = 0,
    SC16_Q11_META = 1,
    PACKET_META = 2,
    SC8_Q7 = 3,
    SC8_Q7_META = 4,
}

pub enum bladerf_error {
    UNEXPECTED  = -1,
    RANGE       = -2,
    INVAL       = -3,
    MEM         = -4,
    IO          = -5,
    TIMEOUT     = -6,
    NODEV       = -7,
    UNSUPPORTED = -8,
    MISALIGNED  = -9,
    CHECKSUM    = -10,
    NO_FILE     = -11,
    UPDATE_FPGA = -12,
    UPDATE_FW   = -13,
    TIME_PAST   = -14,
    QUEUE_FULL  = -15,
    FPGA_OP     = -16,
    PERMISSION  = -17,
    WOULD_BLOCK = -18,
}

pub enum bladerf_meta {
    STATUS_OVERRUN = 1,
    STATUS_UNDERUN = 2,
    FLAG_HW_MINIEXP1 = 65536,
    FLAG_HW_MINIEXP2 = 131072,
}

pub enum bladerf_meta_tx {
    FLAG_TX_BURST_START = 1,
    FLAG_TX_BURST_END = 2,
    FLAG_TX_NOW = 4,
    FLAG_TX_UPDATE_TIMESTAMP = 8,
}

pub enum bladerf_meta_rx {
    FLAG_RX_NOW = 2147483648,
    FLAG_RX_HW_UNDERFLOW = 1,
}

#[repr(C)]
#[derive(Clone)]
pub struct Struct_bladerf_metadata {
    pub timestamp: uint64_t,
    pub flags: uint32_t,
    pub status: uint32_t,
    pub actual_count: ::libc::c_uint,
    pub reserved: [uint8_t; 32usize],
}

impl ::std::default::Default for Struct_bladerf_metadata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

pub enum Struct_bladerf_stream { }
pub type bladerf_stream_cb =
    ::std::option::Option<extern "C" fn(dev: *mut Struct_bladerf,
                                        stream: *mut Struct_bladerf_stream,
                                        meta: *mut Struct_bladerf_metadata,
                                        samples: *mut ::libc::c_void,
                                        num_samples: size_t,
                                        user_data: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;

#[repr(C)]
#[derive(Copy, Debug)]
pub struct Struct_bladerf_version {
    pub major: uint16_t,
    pub minor: uint16_t,
    pub patch: uint16_t,
    pub describe: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_bladerf_version {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bladerf_version {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
pub enum bladerf_fpga_size {
    UNKNOWN = 0,
    FPGA_40KLE = 40,
    FPGA_115KLE = 115,
}

#[repr(C)]
pub enum bladerf_log_level {
    VERBOSE = 0,
    DEBUG = 1,
    INFO = 2,
    WARNING = 3,
    ERROR = 4,
    CRITICAL = 5,
    SILENT = 6,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub enum bladerf_channel_layout {
    RX_X1 = 0,
    TX_X1 = 1,
    RX_X2 = 2,
    TX_X2 = 3,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub enum bladerf_image_type {
    INVALID= -1,
    RAW = 0,
    FIRMWARE = 1,
    FPGA_40KLE = 2,
    FPGA_115KLE = 3,
    CALIBRATION = 4,
    RX_DC_CAL = 5,
    TX_DC_CAL = 6,
    RX_IQ_CAL = 7,
    TX_IQ_CAL = 8,
}

#[repr(C)]
#[derive(Copy)]
pub struct Struct_bladerf_image {
    pub magic: [::libc::c_char; 8usize],
    pub checksum: [uint8_t; 32usize],
    pub version: Struct_bladerf_version,
    pub timestamp: uint64_t,
    pub serial: [::libc::c_char; 34usize],
    pub reserved: [::libc::c_char; 128usize],
    pub _type: bladerf_image_type,
    pub address: uint32_t,
    pub length: uint32_t,
    pub data: *mut uint8_t,
}
impl ::std::clone::Clone for Struct_bladerf_image {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bladerf_image {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[repr(C)]
#[derive(Copy)]
pub struct Struct_bladerf_lms_dc_cals {
    pub lpf_tuning: int16_t,
    pub tx_lpf_i: int16_t,
    pub tx_lpf_q: int16_t,
    pub rx_lpf_i: int16_t,
    pub rx_lpf_q: int16_t,
    pub dc_ref: int16_t,
    pub rxvga2a_i: int16_t,
    pub rxvga2a_q: int16_t,
    pub rxvga2b_i: int16_t,
    pub rxvga2b_q: int16_t,
}
impl ::std::clone::Clone for Struct_bladerf_lms_dc_cals {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_bladerf_lms_dc_cals {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}

#[link(name = "bladeRF")]
extern "C" {
    pub fn bladerf_get_device_list(devices: *mut *mut Struct_bladerf_devinfo) 
    -> libc::c_int;
    pub fn bladerf_free_device_list(devices: *const Struct_bladerf_devinfo)
    -> ();
    pub fn bladerf_open_with_devinfo(device: *mut *mut Struct_bladerf,
                                     devinfo: *const Struct_bladerf_devinfo)
     -> ::libc::c_int;
    pub fn bladerf_open(device:  *mut *mut Struct_bladerf,
                        device_identifier: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bladerf_close(device: *mut Struct_bladerf) -> ();
    pub fn bladerf_set_usb_reset_on_open(enabled: u8) -> ();
    pub fn bladerf_init_devinfo(info: *mut Struct_bladerf_devinfo) -> ();
    pub fn bladerf_get_devinfo(dev: *mut Struct_bladerf,
                               info: *mut Struct_bladerf_devinfo)
     -> ::libc::c_int;
    pub fn bladerf_get_devinfo_from_str(devstr: *const ::libc::c_char,
                                        info: *mut Struct_bladerf_devinfo)
     -> ::libc::c_int;
    pub fn bladerf_devinfo_matches(a: *const Struct_bladerf_devinfo,
                                   b: *const Struct_bladerf_devinfo) -> u8;
    pub fn bladerf_devstr_matches(dev_str: *const ::libc::c_char,
                                  info: *mut Struct_bladerf_devinfo) -> u8;
    pub fn bladerf_backend_str(backend: bladerf_backend)
     -> *const ::libc::c_char;
    pub fn bladerf_enable_module(dev: *mut Struct_bladerf, m: bladerf_module,
                                 enable: u8) -> ::libc::c_int;
    pub fn bladerf_set_loopback(dev: *mut Struct_bladerf, l: bladerf_loopback)
     -> ::libc::c_int;
    pub fn bladerf_get_loopback(dev: *mut Struct_bladerf,
                                l: *mut bladerf_loopback) -> ::libc::c_int;
    pub fn bladerf_set_sample_rate(dev: *mut Struct_bladerf,
                                   module: bladerf_module,
                                   rate: ::libc::c_uint,
                                   actual: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn bladerf_set_rational_sample_rate(dev: *mut Struct_bladerf,
                                            module: bladerf_module,
                                            rate:
                                                *mut Struct_bladerf_rational_rate,
                                            actual:
                                                *mut Struct_bladerf_rational_rate)
     -> ::libc::c_int;
    pub fn bladerf_set_sampling(dev: *mut Struct_bladerf,
                                sampling: bladerf_sampling) -> ::libc::c_int;
    pub fn bladerf_get_sampling(dev: *mut Struct_bladerf,
                                sampling: *mut bladerf_sampling)
     -> ::libc::c_int;
    pub fn bladerf_get_sample_rate(dev: *mut Struct_bladerf,
                                   module: bladerf_module,
                                   rate: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn bladerf_get_rational_sample_rate(dev: *mut Struct_bladerf,
                                            module: bladerf_module,
                                            rate:
                                                *mut Struct_bladerf_rational_rate)
     -> ::libc::c_int;
    pub fn bladerf_set_correction(dev: *mut Struct_bladerf,
                                  module: bladerf_module,
                                  corr: bladerf_correction, value: int16_t)
     -> ::libc::c_int;
    pub fn bladerf_get_correction(dev: *mut Struct_bladerf,
                                  module: bladerf_module,
                                  corr: bladerf_correction,
                                  value: *mut int16_t) -> ::libc::c_int;
    pub fn bladerf_set_txvga2(dev: *mut Struct_bladerf, gain: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bladerf_get_txvga2(dev: *mut Struct_bladerf,
                              gain: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn bladerf_set_txvga1(dev: *mut Struct_bladerf, gain: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bladerf_get_txvga1(dev: *mut Struct_bladerf,
                              gain: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn bladerf_set_lna_gain(dev: *mut Struct_bladerf,
                                gain: bladerf_lna_gain) -> ::libc::c_int;
    pub fn bladerf_get_lna_gain(dev: *mut Struct_bladerf,
                                gain: *mut bladerf_lna_gain) -> ::libc::c_int;
    pub fn bladerf_set_rxvga1(dev: *mut Struct_bladerf, gain: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bladerf_get_rxvga1(dev: *mut Struct_bladerf,
                              gain: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn bladerf_set_rxvga2(dev: *mut Struct_bladerf, gain: ::libc::c_int)
     -> ::libc::c_int;
    pub fn bladerf_get_rxvga2(dev: *mut Struct_bladerf,
                              gain: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn bladerf_set_gain(dev: *mut Struct_bladerf, _mod: bladerf_module,
                            gain: ::libc::c_int) -> ::libc::c_int;
    pub fn bladerf_set_bandwidth(dev: *mut Struct_bladerf,
                                 module: bladerf_module,
                                 bandwidth: ::libc::c_uint,
                                 actual: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn bladerf_get_bandwidth(dev: *mut Struct_bladerf,
                                 module: bladerf_module,
                                 bandwidth: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn bladerf_set_lpf_mode(dev: *mut Struct_bladerf,
                                module: bladerf_module,
                                mode: bladerf_lpf_mode) -> ::libc::c_int;
    pub fn bladerf_get_lpf_mode(dev: *mut Struct_bladerf,
                                module: bladerf_module,
                                mode: *mut bladerf_lpf_mode) -> ::libc::c_int;
    pub fn bladerf_select_band(dev: *mut Struct_bladerf,
                               module: bladerf_module,
                               frequency: ::libc::c_uint) -> ::libc::c_int;
    pub fn bladerf_set_frequency(dev: *mut Struct_bladerf,
                                 module: bladerf_module,
                                 frequency: u64) -> ::libc::c_int;
    pub fn bladerf_schedule_retune(dev: *mut Struct_bladerf,
                                   module: bladerf_module,
                                   timestamp: uint64_t,
                                   frequency: ::libc::c_uint,
                                   quick_tune: *mut Struct_bladerf_quick_tune)
     -> ::libc::c_int;
    pub fn bladerf_cancel_scheduled_retunes(dev: *mut Struct_bladerf,
                                            module: bladerf_module)
     -> ::libc::c_int;
    pub fn bladerf_get_frequency(dev: *mut Struct_bladerf,
                                 module: bladerf_module,
                                 frequency: *mut u64)
     -> ::libc::c_int;
    pub fn bladerf_get_quick_tune(dev: *mut Struct_bladerf,
                                  module: bladerf_module,
                                  quick_tune: *mut Struct_bladerf_quick_tune)
     -> ::libc::c_int;
    pub fn bladerf_set_tuning_mode(dev: *mut Struct_bladerf,
                                   mode: bladerf_tuning_mode)
     -> ::libc::c_int;
    pub fn bladerf_expansion_attach(dev: *mut Struct_bladerf, xb: bladerf_xb)
     -> ::libc::c_int;
    pub fn bladerf_expansion_get_attached(dev: *mut Struct_bladerf,
                                          xb: *mut bladerf_xb)
     -> ::libc::c_int;
    pub fn bladerf_xb200_set_filterbank(dev: *mut Struct_bladerf,
                                        _mod: bladerf_module,
                                        filter: bladerf_xb200_filter)
     -> ::libc::c_int;
    pub fn bladerf_xb200_get_filterbank(dev: *mut Struct_bladerf,
                                        module: bladerf_module,
                                        filter: *mut bladerf_xb200_filter)
     -> ::libc::c_int;
    pub fn bladerf_xb200_set_path(dev: *mut Struct_bladerf,
                                  module: bladerf_module,
                                  path: bladerf_xb200_path) -> ::libc::c_int;
    pub fn bladerf_xb200_get_path(dev: *mut Struct_bladerf,
                                  module: bladerf_module,
                                  path: *mut bladerf_xb200_path)
     -> ::libc::c_int;
    pub fn bladerf_init_stream(stream: *mut *mut Struct_bladerf_stream,
                               dev: *mut Struct_bladerf,
                               callback: bladerf_stream_cb,
                               buffers: *mut *mut *mut ::libc::c_void,
                               num_buffers: size_t, format: bladerf_format,
                               samples_per_buffer: size_t,
                               num_transfers: size_t,
                               user_data: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn bladerf_stream(stream: *mut Struct_bladerf_stream,
                          module: bladerf_module) -> ::libc::c_int;
    pub fn bladerf_submit_stream_buffer(stream: *mut Struct_bladerf_stream,
                                        buffer: *mut ::libc::c_void,
                                        timeout_ms: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn bladerf_deinit_stream(stream: *mut Struct_bladerf_stream) -> ();
    pub fn bladerf_set_stream_timeout(dev: *mut Struct_bladerf,
                                      module: bladerf_module,
                                      timeout: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn bladerf_get_stream_timeout(dev: *mut Struct_bladerf,
                                      module: bladerf_module,
                                      timeout: *mut ::libc::c_uint)
     -> ::libc::c_int;
    pub fn bladerf_sync_config(dev: *mut Struct_bladerf,
                               layout: bladerf_channel_layout,
                               format: bladerf_format,
                               num_buffers: ::libc::c_uint,
                               buffer_size: ::libc::c_uint,
                               num_transfers: ::libc::c_uint,
                               stream_timeout: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn bladerf_sync_tx(dev: *mut Struct_bladerf,
                           samples: *mut ::libc::c_void,
                           num_samples: ::libc::c_uint,
                           metadata: *mut Struct_bladerf_metadata,
                           timeout_ms: ::libc::c_uint) -> ::libc::c_int;
    pub fn bladerf_sync_rx(dev: *mut Struct_bladerf,
                           samples: *mut ::libc::c_void,
                           num_samples: ::libc::c_uint,
                           metadata: *mut Struct_bladerf_metadata,
                           timeout_ms: ::libc::c_uint) -> ::libc::c_int;
    pub fn bladerf_get_serial(dev: *mut Struct_bladerf,
                              serial: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bladerf_get_vctcxo_trim(dev: *mut Struct_bladerf,
                                   trim: *mut uint16_t) -> ::libc::c_int;
    pub fn bladerf_get_fpga_size(dev: *mut Struct_bladerf,
                                 size: *mut bladerf_fpga_size)
     -> ::libc::c_int;
    pub fn bladerf_fw_version(dev: *mut Struct_bladerf,
                              version: *mut Struct_bladerf_version)
     -> ::libc::c_int;
    pub fn bladerf_is_fpga_configured(dev: *mut Struct_bladerf)
     -> ::libc::c_int;
    pub fn bladerf_fpga_version(dev: *mut Struct_bladerf,
                                version: *mut Struct_bladerf_version)
     -> ::libc::c_int;
    pub fn bladerf_device_speed(dev: *mut Struct_bladerf)
     -> bladerf_dev_speed;
    pub fn bladerf_flash_firmware(dev: *mut Struct_bladerf,
                                  firmware: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bladerf_load_fpga(dev: *mut Struct_bladerf,
                             fpga: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bladerf_flash_fpga(dev: *mut Struct_bladerf,
                              fpga_image: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn bladerf_erase_stored_fpga(dev: *mut Struct_bladerf)
     -> ::libc::c_int;
    pub fn bladerf_device_reset(dev: *mut Struct_bladerf) -> ::libc::c_int;
    pub fn bladerf_jump_to_bootloader(dev: *mut Struct_bladerf)
     -> ::libc::c_int;
    pub fn bladerf_strerror(error: ::libc::c_int) -> *const ::libc::c_char;
    pub fn bladerf_version(version: *mut Struct_bladerf_version) -> ();
    pub fn bladerf_log_set_verbosity(level: bladerf_log_level) -> ();
    pub fn bladerf_alloc_image(_type: bladerf_image_type, address: uint32_t,
                               length: uint32_t) -> *mut Struct_bladerf_image;
    pub fn bladerf_alloc_cal_image(fpga_size: bladerf_fpga_size,
                                   vctcxo_trim: uint16_t)
     -> *mut Struct_bladerf_image;
    pub fn bladerf_free_image(image: *mut Struct_bladerf_image) -> ();
    pub fn bladerf_image_write(image: *mut Struct_bladerf_image,
                               file: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bladerf_image_read(image: *mut Struct_bladerf_image,
                              file: *const ::libc::c_char) -> ::libc::c_int;
    pub fn bladerf_si5338_read(dev: *mut Struct_bladerf, address: uint8_t,
                               val: *mut uint8_t) -> ::libc::c_int;
    pub fn bladerf_si5338_write(dev: *mut Struct_bladerf, address: uint8_t,
                                val: uint8_t) -> ::libc::c_int;
    pub fn bladerf_si5338_set_tx_freq(dev: *mut Struct_bladerf,
                                      freq: ::libc::c_uint) -> ::libc::c_int;
    pub fn bladerf_si5338_set_rx_freq(dev: *mut Struct_bladerf,
                                      freq: ::libc::c_uint) -> ::libc::c_int;
    pub fn bladerf_lms_read(dev: *mut Struct_bladerf, address: uint8_t,
                            val: *mut uint8_t) -> ::libc::c_int;
    pub fn bladerf_lms_write(dev: *mut Struct_bladerf, address: uint8_t,
                             val: uint8_t) -> ::libc::c_int;
    pub fn bladerf_lms_set_dc_cals(dev: *mut Struct_bladerf,
                                   dc_cals: *const Struct_bladerf_lms_dc_cals)
     -> ::libc::c_int;
    pub fn bladerf_lms_get_dc_cals(dev: *mut Struct_bladerf,
                                   dc_cals: *mut Struct_bladerf_lms_dc_cals)
     -> ::libc::c_int;
    pub fn bladerf_config_gpio_read(dev: *mut Struct_bladerf,
                                    val: *mut uint32_t) -> ::libc::c_int;
    pub fn bladerf_config_gpio_write(dev: *mut Struct_bladerf, val: uint32_t)
     -> ::libc::c_int;
    pub fn bladerf_expansion_gpio_read(dev: *mut Struct_bladerf,
                                       val: *mut uint32_t) -> ::libc::c_int;
    pub fn bladerf_expansion_gpio_write(dev: *mut Struct_bladerf,
                                        val: uint32_t) -> ::libc::c_int;
    pub fn bladerf_expansion_gpio_dir_read(dev: *mut Struct_bladerf,
                                           val: *mut uint32_t)
     -> ::libc::c_int;
    pub fn bladerf_expansion_gpio_dir_write(dev: *mut Struct_bladerf,
                                            val: uint32_t) -> ::libc::c_int;
    pub fn bladerf_get_timestamp(dev: *mut Struct_bladerf,
                                 _mod: bladerf_module, value: *mut uint64_t)
     -> ::libc::c_int;
    pub fn bladerf_dac_write(dev: *mut Struct_bladerf, val: uint16_t)
     -> ::libc::c_int;
    pub fn bladerf_dac_read(dev: *mut Struct_bladerf, val: *mut uint16_t)
     -> ::libc::c_int;
    pub fn bladerf_xb_spi_write(dev: *mut Struct_bladerf, val: uint32_t)
     -> ::libc::c_int;
    pub fn bladerf_calibrate_dc(dev: *mut Struct_bladerf,
                                module: bladerf_cal_module) -> ::libc::c_int;
    pub fn bladerf_erase_flash(dev: *mut Struct_bladerf,
                               erase_block: uint32_t, count: uint32_t)
     -> ::libc::c_int;
    pub fn bladerf_read_flash(dev: *mut Struct_bladerf, buf: *mut uint8_t,
                              page: uint32_t, count: uint32_t)
     -> ::libc::c_int;
    pub fn bladerf_write_flash(dev: *mut Struct_bladerf, buf: *const uint8_t,
                               page: uint32_t, count: uint32_t)
     -> ::libc::c_int;
    pub fn bladerf_get_bootloader_list(list: *mut *mut Struct_bladerf_devinfo)
     -> ::libc::c_int;
    pub fn bladerf_load_fw_from_bootloader(device_identifier:
                                               *const ::libc::c_char,
                                           backend: bladerf_backend,
                                           bus: uint8_t, addr: uint8_t,
                                           file: *const ::libc::c_char)
     -> ::libc::c_int;
}
